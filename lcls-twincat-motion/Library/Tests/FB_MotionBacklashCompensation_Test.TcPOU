<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MotionBacklashCompensation_Test" Id="{faf56d99-8176-49bc-9b07-ea34ff60af35}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MotionBacklashCompensation_Test EXTENDS TcUnit.FB_TestSuite
(*
    Test that FB_MotionStage drive power enable mode bug is fixed
    switching from ALWAYS to DURING_MOTION mode. the mode switch should first disable power
    then reanable power to the drive with the next absolution move cmd.
*)
VAR
    fbMotorTestSuite 	: FB_MotorTestSuite;
    stMotionStage 		: ST_MotionStage := (sName := 'RATTM:MOTION',
                                                bPowerSelf := TRUE,
                                                nEnableMode:= ENUM_StageEnableMode.ALWAYS,
                                                fHomePosition:=0.0,
                                                nHomingMode:=ENUM_EpicsHomeCmd.LOW_LIMIT);
    fbMotionStage		: FB_MotionStage;
    fbSetPos            : MC_SetPosition;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestMotionBacklashCompensation();]]></ST>
    </Implementation>
    <Method Name="TestMotionBacklashCompensation" Id="{9b7279ed-7c75-4a1d-8b3b-393205deaf83}">
      <Declaration><![CDATA[METHOD PRIVATE TestMotionBacklashCompensation
VAR_INST
tonHomeSwitchSim : TON;
uStates	: UINT := 10;
bLimitBackward : BOOL := TRUE;
bLimitForward  : BOOL := TRUE;
bBacklashCompensationHomeExp  : BOOL:=FALSE;
bBacklashCompensationHomeStatus  : BOOL;
bBacklashCompensationStatus  : BOOL;
bBacklashCompensationStatusExp: BOOL:=TRUE;
// Positive compensation
bBacklashCompensationPosFwd  : LREAL;
bBacklashCompensationPosRev  : LREAL;
// Negative compensation
bBacklashCompensationNegFwd  : LREAL;
bBacklashCompensationNegRev  : LREAL;
bBacklashCompensationActPos  : LREAL :=4.0;
bBacklashCompensationActNeg  : LREAL :=-4.0;
bBacklashCompensationNotAct  : LREAL :=0.0;
ptWaitTime: TIME:=T#1S;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestModeEnableSwitchAndAbsoluteMove');

CASE uStates OF
    //init
    10:
        //  start homming and geet backalsh status.
        stMotionStage.bHomeCmd := TRUE;
        tonHomeSwitchSim.IN:=TRUE;
        ptWaitTime:=T#1S;
        uStates := 20;
    20:
        IF stMotionStage.bBusy THEN
            // backlash should not be enable here
            bBacklashCompensationHomeStatus := stMotionStage.bBacklashStatus;
        END_IF
        // Homming busy
        IF tonHomeSwitchSim.Q AND stMotionStage.Axis.NcToPlc.StateDWord.10 AND NOT stMotionStage.Axis.NcToPlc.StateDWord.3 THEN
            bLimitBackward := FALSE;
            tonHomeSwitchSim.IN:=FALSE;
        END_IF

        IF stMotionStage.Axis.NcToPlc.StateDWord.9 AND NOT stMotionStage.Axis.NcToPlc.StateDWord.3 THEN
            bLimitBackward := TRUE;
        END_IF

        IF stMotionStage.bHomed THEN
            uStates := 40;
        END_IF
    40:

    // wait for absolute move done
        stMotionStage.bUserBacklashEn:=TRUE;
    // Positive backlash compensation
        stMotionStage.fBacklash:=4;
        // Initiate an absolute move
        uStates := 50;
    50:
        // Initate Positive backlash compensation
        stMotionStage.fPosition := 100;
        stMotionStage.fVelocity := 100;
        stMotionStage.fAcceleration := 100;
        stMotionStage.fDeceleration:= 100;
        stMotionStage.bMoveCmd:=TRUE;
        uStates := 60;
        //completed
    60:
        IF stMotionStage.bBusy THEN
            // at this point the backlash compensation is enabled
            bBacklashCompensationStatus:=stMotionStage.bBacklashStatus;
            tonHomeSwitchSim.IN:=TRUE;
            ptWaitTime:=T#0.1S;
        END_IF

        IF tonHomeSwitchSim.Q AND NOT bBacklashCompensationStatus THEN
            RETURN;
        END_IF

        IF stMotionStage.bDone THEN
            bBacklashCompensationPosFwd:=(stMotionStage.Axis.NcToPlc.ActPos - stMotionStage.Axis.NcToPlc.ActPosWithoutPosCorrection);
            tonHomeSwitchSim.IN:=FALSE;
            uStates := 70;
        END_IF

    70:
        // Reverse Direction
        stMotionStage.fPosition := 50;
        stMotionStage.bMoveCmd:=TRUE;
        uStates := 80;
    80:
        IF stMotionStage.bBusy THEN
            // ;
        END_IF

        IF stMotionStage.bDone THEN
            bBacklashCompensationPosRev:=(stMotionStage.Axis.NcToPlc.ActPos - stMotionStage.Axis.NcToPlc.ActPosWithoutPosCorrection);
            uStates := 90;
        END_IF
    90:
        // Negative Compensation : negative absolute move
        stMotionStage.fBacklash:=-4;
        stMotionStage.fPosition:=10;
        stMotionStage.bMoveCmd:=TRUE;
        uStates:=100;
    100:
        IF stMotionStage.bDone THEN
            bBacklashCompensationNegFwd:=(stMotionStage.Axis.NcToPlc.ActPos - stMotionStage.Axis.NcToPlc.ActPosWithoutPosCorrection);
            uStates:=110;
        END_IF
    110:
        // Negative Compensation : positive absolute move
        stMotionStage.fPosition:=50;
        stMotionStage.bMoveCmd:=TRUE;
        uStates:=120;
    120:
        IF stMotionStage.bDone THEN
            bBacklashCompensationNegRev:=(stMotionStage.Axis.NcToPlc.ActPos - stMotionStage.Axis.NcToPlc.ActPosWithoutPosCorrection);
            uStates:=130;
        END_IF
    130:
        AssertEquals ( Expected:=bBacklashCompensationHomeExp, Actual:=bBacklashCompensationHomeStatus , Message:='Error:Backlash compensation enable in while homming');
        AssertEquals ( Expected:=bBacklashCompensationStatusExp, Actual:=bBacklashCompensationStatus , Message:='Error:Backlash compensation disabled in absolute move mode');
        AssertEquals_LREAL ( Expected:=bBacklashCompensationNotAct, Actual:=bBacklashCompensationPosFwd , Delta:=0.0, Message:='Error: Positive compensation enabled: Not compensation must be applied');
        AssertEquals_LREAL ( Expected:=bBacklashCompensationActPos,    Actual:=bBacklashCompensationPosRev , Delta:=0.0, Message:='Error: Positive compensation enabled: Compensation must be applied');
        AssertEquals_LREAL ( Expected:=bBacklashCompensationNotAct, Actual:=bBacklashCompensationNegFwd , Delta:=0.0, Message:='Error: Negative compensation enabled: Not compensation should be applied');
        AssertEquals_LREAL ( Expected:=bBacklashCompensationActNeg,    Actual:=bBacklashCompensationNegRev , Delta:=0.0, Message:='Error: Negative compensation enabled: Compensation must be applied');
        TEST_FINISHED();
    ELSE
        ;
END_CASE

stMotionStage.bHardwareEnable := TRUE;
stMotionStage.bLimitBackwardEnable := bLimitBackward;
stMotionStage.bLimitForwardEnable := bLimitForward;
stMotionStage.bPowerSelf := TRUE;
tonHomeSwitchSim(PT:=ptWaitTime);
fbMotionStage(stMotionStage := stMotionStage);
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>