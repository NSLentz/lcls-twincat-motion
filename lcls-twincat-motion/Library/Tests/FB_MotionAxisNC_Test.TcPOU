<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MotionAxisNC_Test" Id="{81b414d2-91a5-4f50-ad3f-2b1deeb40238}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_MotionAxisNC_Test EXTENDS FB_TestSuite
VAR
    AxisReference : AXIS_REF;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
GivenLinkedAxisRefExpectSequenceOfOperationsSuccessful();
]]></ST>
    </Implementation>
    <Method Name="GivenLinkedAxisRefExpectSequenceOfOperationsSuccessful" Id="{ff4ad0ec-00c9-405a-9dbd-2ba69829c1ac}">
      <Declaration><![CDATA[
METHOD PRIVATE GivenLinkedAxisRefExpectSequenceOfOperationsSuccessful
VAR_INST
    nTestStep : INT;
    fbTestTimer : TON := (PT := T#10s);

    fbMotionAxisNC : FB_MotionAxisNC(
        AxisReference := THIS^.AxisReference
    );
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

fbTestTimer(IN := TRUE);

fbMotionAxisNC();

CASE nTestStep OF
    0:
        fbMotionAxisNC.Reset();
        fbMotionAxisNC.Power(
            Enable := FALSE,
            Enable_Positive := FALSE,
            Enable_Negative := FALSE
        );

        nTestStep := nTestStep + 1;
    1:
        IF fbMotionAxisNC.ResetDone AND
            NOT fbMotionAxisNC.PowerIsEnabled AND
            NOT fbMotionAxisNC.PositiveMotionIsEnabled AND
            NOT fbMotionAxisNC.NegativeMotionIsEnabled THEN
            AssertFalse(
                Condition := fbMotionAxisNC.PowerError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.PowerErrorID,
                Message := 'Error ID should be 0.'
            );

            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteBusy,
                Message := 'Move should not show as busy.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteDone,
                Message := 'Move should not show as done.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.MoveAbsoluteErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    2:
        fbMotionAxisNC.Power(
            Enable := TRUE,
            Enable_Positive := TRUE,
            Enable_Negative := TRUE,
            Override := 90.0
        );

        nTestStep := nTestStep + 1;
    3:
        IF fbMotionAxisNC.PowerIsEnabled AND
            fbMotionAxisNC.PositiveMotionIsEnabled AND
            fbMotionAxisNC.NegativeMotionIsEnabled THEN
            AssertEquals_LREAL(
                Expected := 90.0,
                Actual := fbMotionAxisNC.GetPowerOverride(),
                Delta := 0.0,
                Message := 'GetPowerOverride() did not return the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 90.0,
                Actual := fbMotionAxisNC.PowerOverride,
                Delta := 0.0,
                Message := 'PowerOverride was not the expected value.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.PowerError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.PowerErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    4:
        fbMotionAxisNC.MoveAbsolute(
            Position := 15.0,
            Velocity := 16.0,
            Acceleration := 17.0,
            Deceleration := 18.0,
            Jerk := 19.0,
            BufferMode := MC_BufferMode.MC_BlendingHigh
        );

        nTestStep := nTestStep + 1;
    5:
         IF fbMotionAxisNC.MoveAbsoluteBusy THEN
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteDone,
                Message := 'Move should not show as done.'
            );
            AssertEquals_LREAL(
                Expected := 15.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetPosition,
                Delta := 0.0,
                Message := 'Position setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 16.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetVelocity,
                Delta := 0.0,
                Message := 'Velocity setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 17.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetAcceleration,
                Delta := 0.0,
                Message := 'Acceleration setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 18.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetDeceleration,
                Delta := 0.0,
                Message := 'Deceleration setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 19.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetJerk,
                Delta := 0.0,
                Message := 'Jerk setpoint was not the expected value.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.MoveAbsoluteErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    6:
         IF fbMotionAxisNC.MoveAbsoluteDone THEN
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteBusy,
                Message := 'Move should not show as busy.'
            );
            AssertEquals_LREAL(
                Expected := 15.0,
                Actual := fbMotionAxisNC.MeasuredPosition,
                Delta := 1e-3,
                Message := 'Measured position was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredVelocity,
                Delta := 1.0,
                Message := 'Measured velocity was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredAcceleration,
                Delta := 1.0,
                Message := 'Measured acceleration was not the expected value.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.MoveAbsoluteErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    7:
        fbMotionAxisNC.MoveAbsolute(
            Position := 16.0,
            Velocity := 17.0,
            Acceleration := 18.0,
            Deceleration := 19.0,
            Jerk := 110.0,
            BufferMode := MC_BufferMode.MC_BlendingHigh
        );

        nTestStep := nTestStep + 1;
    8:
         IF fbMotionAxisNC.MoveAbsoluteBusy THEN
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteDone,
                Message := 'Move should not show as done.'
            );
            AssertEquals_LREAL(
                Expected := 16.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetPosition,
                Delta := 0.0,
                Message := 'Position setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 17.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetVelocity,
                Delta := 0.0,
                Message := 'Velocity setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 18.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetAcceleration,
                Delta := 0.0,
                Message := 'Acceleration setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 19.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetDeceleration,
                Delta := 0.0,
                Message := 'Deceleration setpoint was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 110.0,
                Actual := fbMotionAxisNC.MoveAbsoluteTargetJerk,
                Delta := 0.0,
                Message := 'Jerk setpoint was not the expected value.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.MoveAbsoluteErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    9:
         IF fbMotionAxisNC.MoveAbsoluteDone THEN
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteBusy,
                Message := 'Move should not show as busy.'
            );
            AssertEquals_LREAL(
                Expected := 16.0,
                Actual := fbMotionAxisNC.MeasuredPosition,
                Delta := 1e-3,
                Message := 'Measured position was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredVelocity,
                Delta := 1.0,
                Message := 'Measured velocity was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredAcceleration,
                Delta := 1.0,
                Message := 'Measured acceleration was not the expected value.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.MoveAbsoluteErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    10:
        fbMotionAxisNC.MoveAbsolute(
            Position := 0.0,
            Velocity := 17.0,
            Acceleration := 18.0,
            Deceleration := 19.0,
            Jerk := 110.0,
            BufferMode := MC_BufferMode.MC_BlendingHigh
        );

        nTestStep := nTestStep + 1;
    11:
         IF fbMotionAxisNC.MoveAbsoluteDone THEN
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteBusy,
                Message := 'Move should not show as busy.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredPosition,
                Delta := 1e-3,
                Message := 'Measured position was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredVelocity,
                Delta := 1.0,
                Message := 'Measured velocity was not the expected value.'
            );
            AssertEquals_LREAL(
                Expected := 0.0,
                Actual := fbMotionAxisNC.MeasuredAcceleration,
                Delta := 1.0,
                Message := 'Measured acceleration was not the expected value.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.MoveAbsoluteError,
                Message := 'Move should not show an error.'
            );
            AssertEquals_UDINT(
                Expected := 0,
                Actual := fbMotionAxisNC.MoveAbsoluteErrorID,
                Message := 'Error ID should be 0.'
            );

            nTestStep := nTestStep + 1;
        END_IF
    12:
        fbMotionAxisNC.Power(
            Enable := FALSE,
            Enable_Positive := FALSE,
            Enable_Negative := FALSE
        );

        nTestStep := nTestStep + 1;
    13:
        IF NOT fbMotionAxisNC.PowerStatus THEN
            AssertFalse(
                Condition := fbMotionAxisNC.PowerIsEnabled,
                Message := 'Axis should not be enabled.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.PositiveMotionIsEnabled,
                Message := 'Axis positive motion should not be enabled.'
            );
            AssertFalse(
                Condition := fbMotionAxisNC.NegativeMotionIsEnabled,
                Message := 'Axis negative motion should not be enabled.'
            );

            nTestStep := nTestStep + 1;
        END_IF

END_CASE

IF nTestStep = 14 THEN
    TEST_FINISHED();
ELSIF fbTestTimer.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>